name: 🚀 Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop, "feature/*", "hotfix/*"]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "18"
  CACHE_VERSION: v1

jobs:
  # 🔍 Code Quality & Testing
  quality-checks:
    name: 🔍 Code Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm list --depth=0

      - name: 🔍 Run ESLint
        run: |
          echo "🔍 Running ESLint..."
          npm run lint -- --max-warnings 0
        continue-on-error: false

      - name: 🎨 Run Prettier check
        run: |
          echo "🎨 Checking code formatting..."
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md,json}"
        continue-on-error: false

      - name: 🧪 Run tests with coverage
        run: |
          echo "🧪 Running tests..."
          npm test -- --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: 🏗️ Build project
        run: |
          echo "🏗️ Building project..."
          npm run build
          echo "✅ Build completed successfully"

      - name: 📏 Bundle size analysis
        run: |
          echo "📏 Analyzing bundle size..."
          npx bundlesize
        continue-on-error: true

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: build/
          retention-days: 30
          compression-level: 6

  # 🔒 Security Scanning
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔍 Run npm audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level moderate --production
        continue-on-error: true

      - name: 🔒 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: 🛡️ Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

  # 🚀 Performance Testing
  performance-tests:
    name: 🚀 Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-checks

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🏗️ Build project
        run: npm run build

      - name: 📊 Run Lighthouse CI
        run: |
          echo "📊 Running Lighthouse performance tests..."
          npx @lhci/cli@0.12.x autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true

      - name: 📈 Bundle analyzer
        run: |
          echo "📈 Analyzing bundle composition..."
          npx webpack-bundle-analyzer build/static/js/*.js --mode static --report build/bundle-report.html
        continue-on-error: true

  # 🧪 E2E Testing
  e2e-tests:
    name: 🧪 E2E Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-checks

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🏗️ Build project
        run: npm run build

      - name: 🚀 Start application
        run: |
          echo "🚀 Starting application..."
          npx serve -s build -l 3000 &
          sleep 10
          curl -f http://localhost:3000 || exit 1
        env:
          CI: true

      - name: 🧪 Run Playwright tests
        run: |
          echo "🧪 Running E2E tests..."
          npx playwright install --with-deps
          npx playwright test
        continue-on-error: true

  # 📱 Cross-browser Testing
  cross-browser:
    name: 📱 Cross-browser Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-checks
    strategy:
      matrix:
        browser: [chrome, firefox, safari]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🏗️ Build project
        run: npm run build

      - name: 🧪 Run cross-browser tests
        run: |
          echo "🧪 Testing on ${{ matrix.browser }}..."
          npx playwright test --project=${{ matrix.browser }}
        continue-on-error: true

  # 🚀 Deployment
  deploy:
    name: 🚀 Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: build/

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: "--prod"
        continue-on-error: true

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: "./build"
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        continue-on-error: true

      - name: 📢 Notify deployment
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Environment: ${{ github.event.inputs.environment || 'staging' }}"
          echo "📦 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"

  # 📊 Performance Monitoring
  performance-monitor:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Run Web Vitals monitoring
        run: |
          echo "📊 Monitoring Web Vitals..."
          # Add your performance monitoring script here
          echo "✅ Performance monitoring completed"
        continue-on-error: true

  # 🎯 Summary
  ci-summary:
    name: 🎯 CI Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, performance-tests, e2e-tests]
    if: always()

    steps:
      - name: 📊 Generate CI summary
        run: |
          echo "## 🎯 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Jobs:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Code Quality & Testing: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security Scanning: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Performance Testing: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 E2E Testing: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Pipeline Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "### 🕐 Completed at: $(date)" >> $GITHUB_STEP_SUMMARY
