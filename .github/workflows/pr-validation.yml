name: üîç PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

env:
  NODE_VERSION: "18"

jobs:
  # üîç Code Quality Checks
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline

      - name: üîç ESLint check
        run: npm run lint -- --max-warnings 0

      - name: üé® Prettier check
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md,json}"

      - name: üèóÔ∏è TypeScript check
        run: npx tsc --noEmit

      - name: üß™ Run tests
        run: npm test -- --coverage --watchAll=false --passWithNoTests

      - name: üèóÔ∏è Build check
        run: npm run build

  # üìä Bundle Analysis
  bundle-analysis:
    name: üìä Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: code-quality

    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline

      - name: üèóÔ∏è Build project
        run: npm run build

      - name: üìä Analyze bundle size
        run: |
          echo "üìä Analyzing bundle size changes..."
          npx bundlesize
        continue-on-error: true

      - name: üìà Generate bundle report
        run: |
          echo "üìà Generating detailed bundle analysis..."
          npx webpack-bundle-analyzer build/static/js/*.js --mode static --report build/bundle-report.html
        continue-on-error: true

      - name: üì§ Upload bundle report
        uses: actions/upload-artifact@v4
        with:
          name: bundle-report-${{ github.event.number }}
          path: build/bundle-report.html
          retention-days: 7

  # üîí Security Check
  security-check:
    name: üîí Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline

      - name: üîç Security audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level moderate
        continue-on-error: true

      - name: üîí Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # üß™ Visual Regression Testing
  visual-tests:
    name: üß™ Visual Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: code-quality

    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline

      - name: üèóÔ∏è Build project
        run: npm run build

      - name: üöÄ Start application
        run: |
          echo "üöÄ Starting application for visual testing..."
          npx serve -s build -l 3000 &
          sleep 10
          curl -f http://localhost:3000 || exit 1

      - name: üì∏ Take screenshots
        run: |
          echo "üì∏ Taking visual regression screenshots..."
          npx playwright install --with-deps
          npx playwright test --project=visual
        continue-on-error: true

  # üìù PR Comment
  pr-comment:
    name: üìù PR Comment
    runs-on: ubuntu-latest
    needs: [code-quality, bundle-analysis, security-check, visual-tests]
    if: always()

    steps:
      - name: üìù Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('## üîç PR Validation Results')
            );

            const status = {
              'code-quality': '${{ needs.code-quality.result }}',
              'bundle-analysis': '${{ needs.bundle-analysis.result }}',
              'security-check': '${{ needs.security-check.result }}',
              'visual-tests': '${{ needs.visual-tests.result }}'
            };

            const getStatusIcon = (result) => {
              switch(result) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                default: return '‚è≥';
              }
            };

            const comment = `## üîç PR Validation Results

            | Check | Status | Details |
            |-------|--------|---------|
            | üîç Code Quality | ${getStatusIcon(status['code-quality'])} | ESLint, Prettier, TypeScript, Tests |
            | üìä Bundle Analysis | ${getStatusIcon(status['bundle-analysis'])} | Size analysis and optimization |
            | üîí Security Check | ${getStatusIcon(status['security-check'])} | Vulnerability scanning |
            | üß™ Visual Tests | ${getStatusIcon(status['visual-tests'])} | Screenshot comparison |

            ### üìä Overall Status
            ${Object.values(status).every(s => s === 'success') ? '‚úÖ All checks passed!' : '‚ö†Ô∏è Some checks failed or are pending.'}

            <details>
            <summary>üìã Detailed Results</summary>

            - **Code Quality**: ${{ needs.code-quality.result }}
            - **Bundle Analysis**: ${{ needs.bundle-analysis.result }}
            - **Security Check**: ${{ needs.security-check.result }}
            - **Visual Tests**: ${{ needs.visual-tests.result }}

            </details>

            ---
            *This comment will be updated as checks complete.*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
