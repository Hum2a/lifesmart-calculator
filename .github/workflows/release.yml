name: 🚀 Release Automation

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.3)"
        required: true
        type: string
      release_type:
        description: "Type of release"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      pre_release:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "18"

jobs:
  # 🔍 Pre-release Validation
  validate:
    name: 🔍 Pre-release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔍 Run all checks
        run: |
          echo "🔍 Running comprehensive validation..."
          npm run lint -- --max-warnings 0
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md,json}"
          npx tsc --noEmit
          npm test -- --coverage --watchAll=false --passWithNoTests
          npm run build

      - name: 📊 Bundle size check
        run: |
          echo "📊 Checking bundle size..."
          npx bundlesize
        continue-on-error: true

  # 📝 Generate Release Notes
  generate-notes:
    name: 📝 Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      release_notes: ${{ steps.generate_notes.outputs.notes }}
      changelog: ${{ steps.generate_notes.outputs.changelog }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 📝 Generate release notes
        id: generate_notes
        run: |
          echo "📝 Generating release notes..."

          # Get the version from tag or input
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi

          echo "Version: $VERSION"

          # Generate changelog using our smart script
          python3 scripts/update_changelog.py $VERSION

          # Extract release notes from changelog
          CHANGELOG=$(cat CHANGELOG.md)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # 🏗️ Build Release
  build:
    name: 🏗️ Build Release
    runs-on: ubuntu-latest
    needs: [validate, generate-notes]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🏗️ Build production
        run: |
          echo "🏗️ Building production release..."
          npm run build

          # Generate source maps for debugging
          echo "📦 Generating source maps..."
          npx webpack --mode=production --devtool=source-map

      - name: 📊 Bundle analysis
        run: |
          echo "📊 Analyzing final bundle..."
          npx webpack-bundle-analyzer build/static/js/*.js --mode static --report build/bundle-report.html
        continue-on-error: true

      - name: 📦 Create release archive
        run: |
          echo "📦 Creating release archive..."
          tar -czf lifesmart-calculator-${{ github.ref_name }}.tar.gz build/
          zip -r lifesmart-calculator-${{ github.ref_name }}.zip build/

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-build-${{ github.ref_name }}
          path: |
            build/
            lifesmart-calculator-${{ github.ref_name }}.tar.gz
            lifesmart-calculator-${{ github.ref_name }}.zip
          retention-days: 30

  # 🚀 Create GitHub Release
  create-release:
    name: 🚀 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, generate-notes, build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-build-${{ github.ref_name }}
          path: ./release-assets/

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: LifeSmart Calculator ${{ github.ref_name }}
          body: ${{ needs.generate-notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ github.event.inputs.pre_release == 'true' || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          files: |
            release-assets/lifesmart-calculator-${{ github.ref_name }}.tar.gz
            release-assets/lifesmart-calculator-${{ github.ref_name }}.zip
            release-assets/build/bundle-report.html
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 🌐 Deploy to Production
  deploy:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, build, create-release]
    if: github.event_name == 'push' && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc')
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-build-${{ github.ref_name }}
          path: ./build/

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: "--prod"
        continue-on-error: true

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: "./build"
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Release ${{ github.ref_name }}"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        continue-on-error: true

      - name: 📢 Notify deployment
        run: |
          echo "✅ Production deployment completed!"
          echo "🚀 Version: ${{ github.ref_name }}"
          echo "🌐 Environment: Production"
          echo "📦 Commit: ${{ github.sha }}"

  # 📊 Post-release Monitoring
  monitor:
    name: 📊 Post-release Monitoring
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'

    steps:
      - name: 📊 Health check
        run: |
          echo "📊 Performing post-deployment health checks..."
          # Add your health check endpoints here
          echo "✅ Health checks completed"
        continue-on-error: true

      - name: 📈 Performance monitoring
        run: |
          echo "📈 Starting performance monitoring..."
          # Add your performance monitoring here
          echo "✅ Performance monitoring started"
        continue-on-error: true

  # 🎯 Release Summary
  summary:
    name: 🎯 Release Summary
    runs-on: ubuntu-latest
    needs: [validate, generate-notes, build, create-release, deploy]
    if: always()

    steps:
      - name: 📊 Generate release summary
        run: |
          echo "## 🎯 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Release: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Validation: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Release Notes: ${{ needs.generate-notes.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 GitHub Release: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Overall Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "### 🕐 Completed at: $(date)" >> $GITHUB_STEP_SUMMARY
